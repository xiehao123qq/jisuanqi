import java.awt.*;                                                 //导入包import java.awt.event.*;import java.util.Arrays;import java.util.Stack;import javax.swing.*;import java.util.ArrayList;import java.util.Arrays;public class Calculator extends JFrame implements ActionListener {             //声明主类,实现接口ActionListener    JFrame frame;                                           //声明主窗口变量    JButton b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bd, be, bf, bg, bh, b0, bb, bc, Clear;      //声明多个按钮属性    JTextArea ta;                                           //声明一个文本区域组件，用来可以用来显示多行    String Textcontent = "", sum = "";    double result = 0;    public static void main(String[] args) {        // TODO Auto-generated method stub        Calculator cl = new Calculator();               //实例化主类，生成对象cl        cl.go();                                        //调用go方法    }    public void go() {        frame = new JFrame("昊昊的计算器");                 //创建一个新的JFrame对象，标题为"昊昊的计算器"        ta = new JTextArea(1, 20);               //设置文本框大小为1行20列        ta.setBackground(Color.lightGray);                     //设置组件背景颜色为浅灰色        JPanel cp = new JPanel();                              // 创建一个JPanel对象，用于放置数字按钮和运算符按钮        cp.setLayout(new GridLayout(4, 4, 5, 5));   //四行四列，边距为5        JPanel c = new JPanel();                                // 创建一个JPanel对象，用于放置清除按钮和文本区域        c.setLayout(new GridLayout(1, 2, 5, 5));    //一行两列，边距为5        b0 = new JButton("0");                  //创建一个按钮对象，按钮显示的文本内容为0        b0.addActionListener(this);              //为每个按钮添加监听接口        //this 指向当前正在执行该方法的 Calculator 对象        b1 = new JButton("1");        b1.addActionListener(this);        b2 = new JButton("2");        b2.addActionListener(this);        b3 = new JButton("3");        b3.addActionListener(this);        b4 = new JButton("4");        b4.addActionListener(this);        b5 = new JButton("5");        b5.addActionListener(this);        b6 = new JButton("6");        b6.addActionListener(this);        b7 = new JButton("7");        b7.addActionListener(this);        b8 = new JButton("8");        b8.addActionListener(this);        b9 = new JButton("9");        b9.addActionListener(this);        //ba = new JButton(".");       // ba.addActionListener(this);        bd = new JButton("+");        bd.addActionListener(this);        be = new JButton("-");        be.addActionListener(this);        bf = new JButton("×");        bf.addActionListener(this);        bg = new JButton("/");        bg.addActionListener(this);        bh = new JButton("=");        bh.addActionListener(this);        bb = new JButton("(");        bb.addActionListener(this);        bc = new JButton(")");        bc.addActionListener(this);        Clear = new JButton("Clear");        Clear.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                //这里涉及到了java的匿名内部类                Textcontent = "";                result = 0;                     //重写了actionListener方法                sum = "";                ta.setText("");                 //将文本框参数设置为空字符串            }        });        c.add(ta);                          //将各个按钮添加到面板中        c.add(Clear);                       //以此类推        c.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));   //创建空边框        cp.add(b7);        cp.add(b8);        cp.add(b9);        cp.add(bd);        cp.add(b4);        cp.add(b5);        cp.add(b6);        cp.add(be);        cp.add(b1);        cp.add(b2);        cp.add(b3);        cp.add(bf);        cp.add(b0);       // cp.add(ba);        cp.add(bh);        cp.add(bg);        cp.add(bb);        cp.add(bc);        cp.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));        Container f = frame.getContentPane();       //获取了JFrame的内容面板，并将其赋值给f        f.add(c, BorderLayout.NORTH);               //将c面板放置在计算器的北部        f.add(cp, BorderLayout.SOUTH);              //将cp面板放置在计算器的南部        frame.pack();                               //调用pack方法会根据添加到JFrame内的组件大小自动调整窗口大小        frame.setVisible(true);                     //将窗口设置为可见状态    }    public void actionPerformed(ActionEvent e) {        //此方法是ActionListener接口中        String content = e.getActionCommand();          //actionPerformed的具体实现        ta.append(e.getActionCommand());                 //从对象e中获取触发事件的组件的动作命令        getTextContent(content);                        //将按钮上的文本内容追加到JTextArea组件ta中    }                                                   //以显示用户的输入                                // 调用下面的getTexetContent方法，传入content参数    public void getTextContent(String content) {        if (content.equals("+") || content.equals("-") || content.equals("×") || content.equals("/") || content.equals("(") || content.equals(")")) {            Textcontent = Textcontent  +" "+ content + " ";        } else if (content.equals("=")) {            // Textcontent = Textcontent + " " + content;            sum = GetResult(Textcontent);        } else {            Textcontent = Textcontent + content;        }        ta.append(sum);    }    public String GetResult(String Textcontent) {        Stack<Double> numbers = new Stack<>();                  //创建数字栈        Stack<Character> operators = new Stack<>();             //创建字符栈        String[] content = Textcontent.split(" ");         //按照空格对字符串进行分割        ArrayList<String> list = new ArrayList<>(Arrays.asList(content));       //去除数组里的空格        list.removeAll(Arrays.asList("", null));                                //        content = list.toArray(new String[0]);                                  //        System.out.println(Arrays.toString(content));        for (String token : content) {            if (token.matches("[0-9]+")) {                numbers.push(Double.parseDouble(token));            } else if (operators.isEmpty() || token.equals("(")) {              //当运算符栈为空，或字符为左括号时直接进栈                operators.push(token.charAt(0));            } else if (token.equals(")")) {                                      //当字符为右括号时的操作                while (operators.peek() != '(' && (!operators.isEmpty())) {         //直到碰到左括号                    double b, c, d = 0;                    b = numbers.pop();                                      //拿出两个操作数，第一个为右操作数，第二个为左操作数，并弹栈                    c = numbers.pop();                    if (operators.peek().equals('+')) {                        d = c + b;                    } else if (operators.peek().equals('-')) {                        d = c - b;                    } else if (operators.peek().equals('×')) {                        d = c * b;                    } else if (operators.peek().equals('/')) {                        d = c / b;                    }                    numbers.push(d);                    operators.pop();        //将操作符弹出                }                operators.pop();            //将左括号弹出      //当运算符栈不为空时，先判断字符是否为运算符(其实这一步可以在判断优先级的函数里完成),再判断优先级            } else if ((token.equals("+") || token.equals("-") || token.equals("×") || token.equals("/")) && (!operators.isEmpty()) && (youxianji(operators.peek()) < youxianji(token.charAt(0)))) {                operators.push(token.charAt(0));            } else if ((token.equals("+") || token.equals("-") || token.equals("×") || token.equals("/")) && (!operators.isEmpty()) && (youxianji(operators.peek()) < youxianji(token.charAt(0)))) {                double b, c, d = 0;                b = numbers.pop();                c = numbers.pop();                if (operators.peek().equals('+')) {                    d = c + b;                } else if (operators.peek().equals('-')) {                    d = c - b;                } else if (operators.peek().equals('×')) {                    d = c * b;                } else if (operators.peek().equals('/')) {                    d = c / b;                }                numbers.push(d);                operators.pop();                operators.push(token.charAt(0));            }        }        while (!operators.isEmpty()) {              //遍历完成后，倘若运算符栈不是空栈，则继续将运算符栈中的运算符一个个弹出，并到数字栈中弹栈进行运算            double b, c, d = 0;            b = numbers.pop();            c = numbers.pop();            if (operators.peek().equals('+')) {                d = c + b;            } else if (operators.peek().equals('-')) {                d = c - b;            } else if (operators.peek().equals('×')) {                d = c * b;            } else if (operators.peek().equals('/')) {                d = c / b;            }            numbers.push(d);            operators.pop();        }        System.out.println(numbers.peek());        System.out.println(numbers.size());        return numbers.peek() + " ";    }    public int youxianji(char op) {         //优先级判断函数，通过接受字符串内的每个字符进行判断        if (op == '(')            return 1;        else if (op == '+' || op == '-')            return 2;        else if (op == '×' || op == '/')            return 3;        else {            return 0;        }    }}